// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainst);
    Not(in=Ainst, out=Cinst);

    // Write to M
    And(a=Cinst, b=instruction[3], out=writeM);

    // A-register
    Mux16(a=ALUout, b=instruction, sel=Ainst, out=aCon);
    Or(a=instruction[5], b=Ainst, out=Aload);
    ARegister(in=aCon, load=Aload, out[0..14]=addressM, out[0..14]=addressM2);

    // D-register
    And(a=instruction[4], b=Cinst, out=Dload);
    DRegister(in=ALUout, load=Dload, out=Dreg);

    // ALU
    Mux16(a[0..14]=addressM2, b=inM, sel=instruction[12], out=memCon);
    ALU(x=Dreg, y=memCon,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9],  ny=instruction[8],
        f=instruction[7],   no=instruction[6],
        out=outM, out=ALUout, zr=zero, ng=negative);

    // PC control
    Not(in=zero, out=nzero);
    Not(in=negative, out=notnegative);
    And(a=nzero, b=notnegative, out=positive);
    Or(a=zero, b=negative, out=zORn);  // zero Or negative
    Or(a=zero, b=positive, out=zORp);  // zero Or positive

    DMux8Way(in=Cinst, sel=instruction[0..2],
             a=j1, b=j2, c=j3, d=j4,
             e=j5, f=j6, g=j7, h=j8);

    And(a=j1, b=false, out=r1);
    And(a=j2, b=positive, out=r2);
    And(a=j3, b=zero, out=r3);
    And(a=j4, b=zORp, out=r4);
    And(a=j5, b=negative, out=r5);
    And(a=j6, b=nzero, out=r6);
    And(a=j7, b=zORn, out=r7);
    And(a=j8, b=true, out=r8);

    Or8Way(in[0]=r1, in[1]=r2, in[2]=r3, in[3]=r4,
           in[4]=r5, in[5]=r6, in[6]=r7, in[7]=r8,
           out=load);

    PC(in[0..14]=addressM2, load=load, inc=true, reset=reset, out[0..14]=pc);
}
